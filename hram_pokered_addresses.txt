SECTION "HRAM", HRAM

; Initialized to 16.
; Decremented each input iteration if the player
; presses the reset sequence (A+B+SEL+START).
; Soft reset when 0 is reached.
hSoftReset:: ;FF8A
	db	

UNION
;FF8B
hBaseTileID:: ; base tile ID to which offsets are added
hDexWeight::
hWarpDestinationMap::
hOAMTile::
hROMBankTemp::
hPreviousTileset::
hRLEByteValue::
	db	

;FF8C
hSpriteIndexOrTextID:: ; DisplayTextID's argument
hPartyMonIndex::
	db

;FF8D
hVRAMSlot::
	db

;FF8E
hFourTileSpriteCount::
hHalveItemPrices::
	db

NEXTU
;FF8B, FF8C, FF8D
hItemPrice:: ds 3 ; BCD number

NEXTU
;FF8B
hSlideAmount:: db

; the total number of tiles being shifted each time the pic slides by one tile
;FF8C
hSlidingRegionSize:: db

; -1 = left
;  0 = right
;FF8D
hSlideDirection:: db

NEXTU
;FF8B
hSpriteInterlaceCounter::	
hSpriteWidth::  db ; in tiles
;FF8C
hSpriteHeight:: db ; in tiles
;FF8D	
hSpriteOffset:: db

NEXTU
; counters for blinking down arrow
;FF8B
hDownArrowBlinkCount1:: db
;FF8C
hDownArrowBlinkCount2:: db

NEXTU
;FF8B
hMapStride::
hEastWestConnectedMapWidth::
hNorthSouthConnectionStripWidth::
	db
;FF8C
hMapWidth::
hNorthSouthConnectedMapWidth::
	db

NEXTU
;FF8B
hSpriteDataOffset:: db
;FF8C
hSpriteIndex:: db
;FF8D
hSpriteImageIndex::
hSpriteFacingDirection::
hSpriteMovementByte2::
	db

NEXTU
;FF8B, ;FF8C
	ds 2
;FF8D
hLoadSpriteTemp1:: db
;FF8E
hLoadSpriteTemp2:: db

NEXTU
;FF8B, ;FF8C
	ds 2
;FF8D, ;FF8E
hEnemySpeed:: dw
ENDU

UNION
;FF8F
hSpriteOffset2:: db
;FF90
hOAMBufferOffset:: db
;FF91
hSpriteScreenX:: db
;FF92
hSpriteScreenY:: db

NEXTU
hFF8F:: db
hFF90:: db
hFF91:: db
hFF92:: db
ENDU

;FF93
hTilePlayerStandingOn:: db

;FF94
hSpritePriority:: db

UNION
; Multiplication and division variables are meant
; to overlap for back-to-back usage. Big endian.
UNION
;FF95
	ds 1
;FF96, ;FF97, ;FF98
hMultiplicand:: ds 3
;FF99
hMultiplier:: db
;FF9A
	ds 1
;FF9B, ;FF9C, ;FF9D, ;FF9E
hMultiplyBuffer:: ds 4
NEXTU
;FF95, ;FF96, ;FF97, ;FF98
hProduct:: ds 4
NEXTU
;FF95, ;FF96, ;FF97, ;FF98
hDividend:: ds 4
;FF99
hDivisor:: db
;FF9A, ;FF9B, ;FF95C, ;FF9D, ;FF9E
hDivideBuffer:: ds 5
NEXTU
;FF95, ;FF96, ;FF97, ;FF98
hQuotient:: ds 4
;FF99
hRemainder:: db
ENDU

NEXTU
; PrintNumber (big endian).
;FF95
hPastLeadingZeros:: db ; last char printed
;FF96, ;FF97, ;FF98
hNumToPrint:: ds 3
;FF99, ;FF9A, ;FF9B
hPowerOf10:: ds 3
;FF9C, ;FF9D, ;FF9E
hSavedNumToPrint:: ds 3

NEXTU
;FF95
hNPCMovementDirections2Index::
hNPCSpriteOffset::
; distance in steps between NPC and player
hNPCPlayerYDistance::
	db
;FF96
hNPCPlayerXDistance::
	db
;FF97
hFindPathNumSteps:: db
; bit 0: set when the end of the path's Y coordinate matches the target's
; bit 1: set when the end of the path's X coordinate matches the target's
; When both bits are set, the end of the path is at the target's position
; (i.e. the path has been found).
;FF98
hFindPathFlags:: db
;FF99
hFindPathYProgress:: db
;FF9A
hFindPathXProgress:: db
; 0 = from player to NPC
; 1 = from NPC to player
;FF9B
hNPCPlayerRelativePosPerspective:: db
;FF9C
	ds 1
; bit 0:
; 0 = target is to the south or aligned
; 1 = target is to the north
; bit 1:
; 0 = target is to the east or aligned
; 1 = target is to the west
;FF9D
hNPCPlayerRelativePosFlags:: db

NEXTU
;FF95
hSwapItemID:: db
;FF96
hSwapItemQuantity:: db

NEXTU
;FF95, ;FF96
hSignCoordPointer:: dw

NEXTU
;FF95
	ds 1
;FF96
hMutateWY:: db
;FF97
hMutateWX:: db

NEXTU
; temp value used when swapping bytes or words
;FF95
hSwapTemp:: db
;FF96, ;FF97, ;FF98
hExperience:: ds 3 ; big endian
ENDU

UNION
;FF9F, ;FFA0, ;FFA1
hMoney:: ds 3 ; BCD number
NEXTU
; some code zeroes this for no reason when writing a coin amount
;FF9F
hUnusedCoinsByte:: db
;FFA0, ;FFA1
hCoins:: ds 2 ; BCD number
ENDU

;FFA2, ;FFA3, ;FFA4
hDivideBCDDivisor::
hDivideBCDQuotient::
	ds 3 ; BCD number
;FFA5, ;FFA6, ;FFA7
hDivideBCDBuffer::
	ds 3 ; BCD number
;FFA8	;unused?
	ds 1

;FFA9
hSerialReceivedNewData:: db
; $01 = using external clock
; $02 = using internal clock
; $ff = establishing connection
;FFAA
hSerialConnectionStatus:: db
;FFAB
hSerialIgnoringInitialData:: db
;FFAC
hSerialSendData:: db
;FFAD
hSerialReceiveData:: db

; these values are copied to rSCX, rSCY, and rWY during V-blank
;FFAE
hSCX:: db
;FFAF
hSCY:: db
;FFB0
hWY::  db

;FFB1
hJoyLast::     db
;FFB2
hJoyReleased:: db
;FFB3
hJoyPressed::  db
;FFB4
hJoyHeld::     db
;FFB5
hJoy5::        db
;FFB6
hJoy6::        db
;FFB7
hJoy7::        db

;FFB8
hLoadedROMBank:: db
;FFB9
hSavedROMBank::  db

; is automatic background transfer during V-blank enabled?
; if nonzero, yes
; if zero, no
;FFBA
hAutoBGTransferEnabled:: db

; 00 = top third of background
; 01 = middle third of background
; 02 = bottom third of background
;FFBB
hAutoBGTransferPortion:: db

; the destination address of the automatic background transfer
;FFBC, ;FFBD
hAutoBGTransferDest:: dw

;FFBE
hRedrawMapViewRowOffset:: db

; temporary storage for stack pointer during memory transfers that use pop
; to increase speed
;FFBF, ;FFC0
hSPTemp:: dw

; source address for VBlankCopyBgMap function
; the first byte doubles as the byte that enabled the transfer.
; if it is 0, the transfer is disabled
; if it is not 0, the transfer is enabled
; this means that XX00 is not a valid source address
;FFC1, ;FFC2
hVBlankCopyBGSource:: dw

; destination address for VBlankCopyBgMap function
;FFC3, ;FFC4
hVBlankCopyBGDest:: dw

; number of rows for VBlankCopyBgMap to copy
;FFC5
hVBlankCopyBGNumRows:: db

; size of VBlankCopy transfer in 16-byte units
;FFC6
hVBlankCopySize:: db

; source address for VBlankCopy function
;FFC7, ;FFC8
hVBlankCopySource:: dw

; destination address for VBlankCopy function
;FFC9, ;FFCA
hVBlankCopyDest:: dw

; size of source data for VBlankCopyDouble in 8-byte units
;FFCB
hVBlankCopyDoubleSize:: db

; source address for VBlankCopyDouble function
;FFCC, ;FFCD
hVBlankCopyDoubleSource:: dw

; destination address for VBlankCopyDouble function
;FFCE, ;FFCF
hVBlankCopyDoubleDest:: dw

; controls whether a row or column of 2x2 tile blocks is redrawn in V-blank
; 00 = no redraw
; 01 = redraw column
; 02 = redraw row
;FFD0
hRedrawRowOrColumnMode:: db

;FFD1, ;FFD2
hRedrawRowOrColumnDest:: dw

;FFD3
hRandomAdd:: db
;FFD4
hRandomSub:: db

;FFD5
hFrameCounter:: db ; decremented every V-blank (used for delays)

; V-blank sets this to 0 each time it runs.
; So, by setting it to a nonzero value and waiting for it to become 0 again,
; you can detect that the V-blank handler has run since then.
;FFD6
hVBlankOccurred:: db

; Controls which tiles are animated.
; 0 = no animations (breaks Surf)
; 1 = water tile $14 is animated
; 2 = water tile $14 and flower tile $03 are animated
;FFD7
hTileAnimations:: db
;FFD8
hMovingBGTilesCounter1:: db
;FFD9
	ds 1

;FFDA
hCurrentSpriteOffset:: db ; multiple of $10

UNION
;FFDB
hPlayerFacing:: db
;FFDC
hPlayerYCoord:: db
;FFDD
hPlayerXCoord:: db

NEXTU

; $00 = bag full
; $01 = got item
; $80 = didn't meet required number of owned mons
; $FF = player cancelled
;FFDB
hOaksAideResult::
hOaksAideRequirement:: ; required number of owned mons
	db
;FFDC
hOaksAideRewardItem:: db
;FFDD
hOaksAideNumMonsOwned:: db

NEXTU
;FFDB
hVendingMachineItem:: db
;FFDC, ;FFDD, ;FFDe
hVendingMachinePrice:: ds 3 ; BCD number

NEXTU
;FFDB
hGymGateIndex:: db
;FFDC
hGymGateAnswer:: db

NEXTU
;FFDB
hDexRatingNumMonsSeen:: db
;FFDC
hDexRatingNumMonsOwned:: db

NEXTU
;FFDB
hItemToRemoveID:: db
;FFDC
hItemToRemoveIndex:: db

NEXTU
;FFDB
hItemCounter::
hSavedCoordIndex::
hMissableObjectIndex::
hGymTrashCanRandNumMask::
	db

NEXTU
hFFDB:: db
hFFDC:: db
ENDU
;FFDF 	;unused?
	ds 1

;FFE0
hBackupGymGateIndex::
hUnlockedSilphCoDoors::
	db

; the first tile ID in a sequence of tile IDs that increase by 1 each step
;FFE1
hStartTileID:: db
;FFE2, ;FFE3		;unused?
	ds 2

;FFE4
hNewPartyLength:: db

UNION
;FFE5
hDividend2:: db
;FFE6
hDivisor2::  db
;FFE7
hQuotient2:: db

NEXTU
;FFE5
hIsHiddenMissableObject:: db
ENDU

;FFE8
hMapROMBank:: db
;FFE9
hSpriteVRAMSlotAndFacing:: db

;FFEA
hCoordsInFrontOfPlayerMatch::
hSpriteAnimFrameCounter::
	db

UNION
;FFEB
hSpriteScreenYCoord:: db
;FFEC
hSpriteScreenXCoord:: db
;FFED
hSpriteMapYCoord::    db
;FFEE
hSpriteMapXCoord::    db

NEXTU
;FFEB
hItemAlreadyFound:: db
;FFEC, ;FFED
	ds 2
;FFEE
hDidntFindAnyHiddenObject:: db

NEXTU
;FFEB
	ds 1
;FFEC, ;FFED
hSavedMapTextPtr:: dw
;FFEE
	ds 1
ENDU
;FFEF, ;FFF0, ;FFF1, ;FFF2		;unused?
	ds 4

;FFF3
hWhoseTurn:: db ; 0 on player's turn, 1 on enemy's turn

;FFF4
hClearLetterPrintingDelayFlags:: db

;FFF5		;unused?
	ds 1

; bit 0: draw HP fraction to the right of bar instead of below (for party menu)
; bit 1: menu is double spaced
;FFF6
hUILayoutFlags:: db

;FFF7
hFieldMoveMonMenuTopMenuItemX:: db

;FFF8
hJoyInput:: db

;FFF9
hDisableJoypadPolling:: db

;FFFA, ;FFFB, ;FFFC, ;FFFD, ;FFFE		;unused?
	ds 5
