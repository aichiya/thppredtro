Shin Pokemon is not affected by the crash described below. The intent here is to document a problem that can is somewhat common to other projects.

Description: If you have 2 TMs in the last slots of your bag and try to boot the one after the other the game will crash.

Execution: Have any 2 TMs in the last 2 slots of your Bag. Scroll all the way down until you only see thee 2 TMs and the Cancel option. Boot up one of the TMs (Doesn't matter which) until you reach the screen of your party. Don't teach the TM and Press B to exit the part menu. Now try to boot up the TM that is the 2nd from last (the one that is on the top of the visible list) and the game will instantly crash

The default functionality of GetName is that it builds TMHM names on the fly rather than relying on a list of names. Shin Pokemon implements a separate list type for TMHM names, so the code surrounding that solves the issue in a different way. That's why shinpokered doesn't have a solid and easy solution that can be copied.

But hey, this is for rom hackers that struggle with this in their own projects. This one goes out to you folks.

All item names are grabbed and temporarily stored in $CD6D, and they must end in the text terminator value $50. The crash can be replicated by having the item list display TMHMs as the last two items followed by CANCEL as the only three items visible on the list (meaning the player has scrolled all the way down). Trying to teach one of the TMHM items, then backing out of  the pokemon screen, then trying to do it again will cause GetName to write a garbage string to $CD6D that does not terminate with $50. This will cause an endless loop when the string is copied that will overflow into echo ram.

Why is GetName getting garbage strings? GetName loads the value in wNameListType and sees if it is equal 4; this corresponds to lists of item names so it should be 4 for TMHM items. But on the second go-around, you will notice that wNameListType will have a value of 2 which refers to lists of move names!

The value of 2 is a leftover. Booting the TM needs to get the name of the move it contains, so of course 2 needs to go into wNameListType. The problem is that this value is not getting changed back to 4 under the conditions that cause this crash.

Fun fact. GetItemName is the function that is responsible for changing wNameListType back to 4. It runs once for every visible item on the menu. BUT... when it runs for TMHM items, it skips over the part that loads 4 back into wNameListType. So it seems that if TMHM items are the only items visible on the list, then wNameListType never gets updated.

Why does this work fine in vanilla pokered? GetName does not check the value in wNameListType at all. It treats anything at or above HM01's hex value ($C9) as if you wanted to get the name of a TMHM. This typically poses a lot of trouble for rom hackers who want to change or expand things. So a common thing rom hackers do to fix this coding bug is to modify the function to look something like this:

	push bc
	ld b, a
	ld a, [wNameListType]
	cp ITEM_NAME
	ld a, b
	pop bc
	jr nz, .notMachine
	cp HM01
	jp nc, GetMachineName
.notMachine

But now having the proper value of wNameListType matters a lot!

So what is the ultimate solution? Modify the beginning of GetItemName to the following:

GetItemName::
; given an item ID at [wd11e], store the name of the item into a string
;     starting at wcd6d
	push hl
	push bc
	ld a, ITEM_NAME
	ld [wNameListType], a

You're getting the name of an item. That is a given. So you're making sure a 4 is loaded into wNameListType every time.
